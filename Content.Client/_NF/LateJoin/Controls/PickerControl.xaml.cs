using System.Linq;
using Content.Client._NF.LateJoin.Interfaces;
using Content.Client._NF.LateJoin.ListItems;
using Content.Client._NF.LateJoin.Windows;
using Content.Client.Lobby;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.GameTicking;
using Content.Shared.Preferences;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._NF.LateJoin.Controls;

[GenerateTypedNameReferences]
public sealed partial class PickerControl : BasePickerControl
{
    [Dependency] private readonly ILocalizationManager _loc = default!;
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;
    [Dependency] private readonly IPrototypeManager _prototypeManager = default!;
    [Dependency] private readonly JobRequirementsManager _jobReqs = default!;
    [Dependency] private readonly IClientPreferencesManager _preferencesManager = default!;
    private readonly SpriteSystem _spriteSystem;
    private readonly PickerWindow.PickerType _pickerType;

    // Default ctor assumes crew picker type
    public PickerControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();
        _pickerType = PickerWindow.PickerType.Crew;
    }

    public PickerControl(PickerWindow.PickerType pickerType)
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _entitySystem.GetEntitySystem<SpriteSystem>();
        _pickerType = pickerType;
    }

    private Dictionary<NetEntity, StationJobInformation> _lobbyJobs = new();
    private LateJoinListItem.ViewState? _lastSelectedStation;
    public Action<NetEntity, string>? OnJobJoined;

    public override void UpdateUi(IReadOnlyDictionary<NetEntity, StationJobInformation> obj)
    {
        _lobbyJobs = new Dictionary<NetEntity, StationJobInformation>(obj);
        StationItemList.RemoveAllChildren();

        foreach (var stationViewState in BuildStationViewStateList(_lobbyJobs))
        {
            var item = new LateJoinListItem(_pickerType, stationViewState);
            item.StationButton.OnPressed += _ => OnStationPressed(stationViewState);
            StationItemList.AddChild(item);
        }

        // Build station jobs, the right section of the screen.
        StationJobItemList.RemoveAllChildren();
        foreach (var jobViewState in BuildJobViewStateList(obj[_lastSelectedStation!.StationEntity]))
        {
            var item = new JobListItem(jobViewState);
            item.OnPressed += _ =>
            {
                OnJobJoined?.Invoke(_lastSelectedStation.StationEntity, jobViewState.JobId);
            };
            StationJobItemList.AddChild(item);
        }

        StationName.Text = _lastSelectedStation?.StationDisplayName ?? "";
        StationDescription.Text = _lastSelectedStation?.StationDescription ?? "";
    }

    private void OnStationPressed(LateJoinListItem.ViewState viewState)
    {
        _lastSelectedStation = viewState;
        UpdateUi(_lobbyJobs);
    }

    private List<JobListItem.ViewState> BuildJobViewStateList(StationJobInformation jobInformation)
    {
        var viewStateList = new List<JobListItem.ViewState>();

        foreach (var (jobPrototype, jobCount) in jobInformation.JobsAvailable)
        {
            if (_preferencesManager.Preferences?.SelectedCharacter is not HumanoidCharacterProfile profile)
            {
                continue;
            }

            var prototype = _prototypeManager.Index(jobPrototype);
            var jobName = prototype.LocalizedName + jobCount.WrapJobCountInParentheses();
            Texture? texture = null;

            if (_prototypeManager.TryIndex(prototype.Icon, out var jobIcon))
            {
                texture = _spriteSystem.Frame0(jobIcon.Icon);
            }

            var buttonTooltip = "";
            if (!_jobReqs.IsAllowed(prototype, profile, out var denyReason))
            {
                buttonTooltip = denyReason.ToString();
            }

            var isButtonDisabled = jobCount == 0 || !_jobReqs.IsAllowed(prototype, profile, out _);
            var viewState = new JobListItem.ViewState(
                jobId: jobPrototype,
                jobName: jobName,
                toolTip: buttonTooltip,
                disabled: isButtonDisabled,
                jobIcon: texture
            );
            viewStateList.Add(viewState);
        }

        return viewStateList;
    }

    /**
     * Convert some raw dictionary data to a view state model that is more readable.
     *
     * @param obj Dictionary of station entities to job prototypes.
     * @param stationNames Dictionary of station entities to station names.
     * @return List of view states for each station.
     */
    private List<LateJoinListItem.ViewState> BuildStationViewStateList(
        IReadOnlyDictionary<NetEntity, StationJobInformation> obj)
    {
        var stationList = obj.Where(kvp => IncludeStationPredicate(kvp.Value)).ToDictionary(kvp => kvp.Key, kvp => kvp.Value);
        var viewStateList = new List<LateJoinListItem.ViewState>();

        foreach (var (stationEntity, stationJobInformation) in stationList)
        {
            var viewState = new LateJoinListItem.ViewState(
                stationEntity,
                stationJobInformation.StationName,
                stationJobInformation.GetStationNameWithJobCount(),
                stationJobInformation.StationSubtext != null
                    ? _loc.GetString(stationJobInformation.StationSubtext)
                    : "",
                stationJobInformation.StationDescription != null
                    ? _loc.GetString(stationJobInformation.StationDescription)
                    : "",
                _lastSelectedStation?.StationEntity == stationEntity,
                GetStationVisible(stationJobInformation),
                stationJobInformation.StationIcon?.CanonPath
            );

            // Always select the first station in the list if none is selected yet.
            // This is because otherwise the right side of the screen would then be a blank space.
            if (_lastSelectedStation == null)
            {
                _lastSelectedStation = viewState;
                viewState.Selected = true;
            }

            viewStateList.Add(viewState);
        }

        // Sort 0 to the end of the list in the order it is in the dictionary.
        // Sort 1 first, 2 second, etc.
        return viewStateList
            .OrderBy(viewState => obj[viewState.StationEntity].LobbySortOrder == 0
                ? int.MaxValue
                : obj[viewState.StationEntity].LobbySortOrder)
            .ToList();
    }

    // Return whether a given station should be visible or not
    private bool GetStationVisible(StationJobInformation? jobInfo)
    {
        if (jobInfo == null)
            return false;

        // All stations should be visible.
        if (_pickerType == PickerWindow.PickerType.Station)
            return true;

        // If picking for crew (also default behavior), only show ships with active jobs
        return jobInfo.GetJobCount() > 0 || jobInfo.HasUnlimitedJobs();
    }

    // Whether or not to include the station
    private bool IncludeStationPredicate(StationJobInformation jobInfo)
    {
        if (_pickerType == PickerWindow.PickerType.Station)
            return jobInfo.IsLateJoinStation;
        else
            return !jobInfo.IsLateJoinStation;
    }
}
