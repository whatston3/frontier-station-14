using Content.Client._NF.LateJoin.Windows;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._NF.LateJoin.ListItems;

[GenerateTypedNameReferences]
public sealed partial class LateJoinListItem : PanelContainer
{
    public sealed class ViewState(
        NetEntity stationEntity,
        string stationDisplayName,
        string stationListName,
        string stationSubtext,
        string stationDescription,
        bool selected,
        bool visible,
        string? iconPath)
    {
        // The string to display for a given station by itself (e.g. "NFSD Outpost")
        public string StationDisplayName { get; } = stationDisplayName;
        // The string to display for a given station in a list (e.g. "NFSD Outpost (7)")
        public string StationListName { get; } = stationListName;
        public string StationSubtext { get; } = stationSubtext;
        public string StationDescription { get; } = stationDescription;
        public NetEntity StationEntity { get; } = stationEntity;

        public bool Selected { get; set; } = selected;
        public bool Visible { get; set; } = visible;

        public string IconPath { get; } = iconPath ?? "";
    }

    public LateJoinListItem(PickerWindow.PickerType pickerType, ViewState state)
    {
        RobustXamlLoader.Load(this);

        switch (pickerType)
        {
            case PickerWindow.PickerType.Station:
                StationName.SetOnlyStyleClass("windowTitle");
                break;
            case PickerWindow.PickerType.Crew:
            default:
                SetHeight = 40;
                break;
        }

        StationName.Text = state.StationListName;
        StationSubtext.Text = state.StationSubtext;

        // Disallow repeated selection of same station that does UI reloads.
        StationButton.Disabled = state.Selected;
        Visible = state.Visible;

        if (state.IconPath.Length > 0)
        {
            StationIcon.TexturePath = state.IconPath;
        }
    }
}
